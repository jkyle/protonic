[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/funnel.js",
    "memberof": null,
    "longname": "src/funnel.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Immutable from 'immutable';\nimport Stream from './stream';\n\n/**\n * A Funnel is a special type of Stream that combines the states from feeder\n * streams.\n * @extends Stream\n */\nclass Funnel extends Stream {\n\n  /**\n   * A Funnel is a special type of Stream that combines the states from feeder\n   * streams. Once all of the feeder streams have sent state, the Funnel will send the combined\n   * state to any observers. When creating the Funnel, the sourceMap describes the shape of\n   * the combined state. The key for each stream will be the key used to access the state of\n   * that stream on the combined state object.\n   *\n   * @access public\n   * @param  {Immutable.Map} sourceMap - a Map of the feeder streams.\n   * @return {Funnel}           returns an instance of the Funnel stream.\n   */\n  constructor (sourceMap) {\n    if(!sourceMap){\n      throw new Error('You must supply a source map to a funnel');\n    }\n\n    if(!Immutable.Iterable.isKeyed(sourceMap)){\n      throw new Error('You must supply an Immutable.Map as a source map to a funnel');\n    }\n    super(Immutable.Map());\n\n    this.primed = false;\n    this.sourceMap = sourceMap;\n    this.sourceKeys = sourceMap.keySeq();\n    this.subscribers = sourceMap.map((sourceStream, key) => {\n      if(sourceStream.type === 'VIEW') {\n          throw new Error('Funnels cannot subscribe to Views. At key ' + key);\n      }\n\n      return sourceStream.subscribe(newState => {\n        this.state = this.state.set(key, newState);\n      });\n    });\n    this.type = 'FUNNEL';\n  }\n\n  /**\n   * sendState - overwrites Stream's `sendState` by enforcing that all feeder streams have\n   * sent state before sending state on to observers. Once a Funnel is `primed` it will pass\n   * state on, regardless if one stream sends `undefined`.\n   *\n   * @access private\n   * @param  {Immutable} newState - new state (received internally from Stream's `next` method)\n   */\n  sendState (newState) {\n    if(this.primed){\n      super.sendState(newState);\n    } else {\n      if (this.sourceKeys.every(source => newState.get(source))) {\n        this.primed = true;\n        super.sendState(newState);\n      } else {\n        this._state = newState;\n      }\n    }\n  }\n\n  /**\n   * subscribe - Overwrites base Stream class's subscribe method.\n   * Funnels should not emit state to subscribers until all source\n   * streams have defined state.\n   *\n   * @param  {type} observer description\n   * @return {type}          description\n   */\n  subscribe (observer) {\n    this.observers = this.observers.push(observer);\n    if(this.primed) { observer(this._state); }\n    return {\n      unsubscribe: () => {\n        const idx = this.observers.indexOf(observer);\n        if (idx >= 0) {\n          this.observers = this.observers.delete(this.observers.indexOf(observer));\n        } else {\n          throw new RangeError('Observer is not subscribed to this stream.');\n        }\n      }\n    };\n  }\n\n  /**\n   * forceState - Funnels can accept new state an send state back up\n   * the subscription chain. This should only be used in cases of\n   * restoring state.\n   *\n   * @access public\n   * @param  {type} state description\n   * @return {type}       description\n   */\n  forceState (state) {\n    this.sourceMap.forEach((sourceStream, key) => {\n      sourceStream.forceState(state.get(key));\n    });\n  }\n\n  /**\n   * destroy - cleans up a Funnel's feeder subscribers.\n   *\n   * @access public\n   */\n  destroy () {\n    this.subscribers.forEach(subscriber => subscriber.unsubscribe());\n  }\n\n}\n\nexport default Funnel;\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Funnel",
    "memberof": "src/funnel.js",
    "longname": "src/funnel.js~Funnel",
    "access": null,
    "export": true,
    "importPath": "protonic/src/funnel.js",
    "importStyle": "Funnel",
    "description": "A Funnel is a special type of Stream that combines the states from feeder\nstreams.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#constructor",
    "access": "public",
    "description": "A Funnel is a special type of Stream that combines the states from feeder\nstreams. Once all of the feeder streams have sent state, the Funnel will send the combined\nstate to any observers. When creating the Funnel, the sourceMap describes the shape of\nthe combined state. The key for each stream will be the key used to access the state of\nthat stream on the combined state object.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Immutable.Map"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceMap",
        "description": "a Map of the feeder streams."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Funnel"
      ],
      "spread": false,
      "description": "returns an instance of the Funnel stream."
    },
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "primed",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#primed",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sourceMap",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#sourceMap",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sourceKeys",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#sourceKeys",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subscribers",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#subscribers",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#state",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#type",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sendState",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#sendState",
    "access": "private",
    "description": "sendState - overwrites Stream's `sendState` by enforcing that all feeder streams have\nsent state before sending state on to observers. Once a Funnel is `primed` it will pass\nstate on, regardless if one stream sends `undefined`.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Immutable"
        ],
        "spread": false,
        "optional": false,
        "name": "newState",
        "description": "new state (received internally from Stream's `next` method)"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "primed",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#primed",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_state",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#_state",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subscribe",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#subscribe",
    "access": null,
    "description": "subscribe - Overwrites base Stream class's subscribe method.\nFunnels should not emit state to subscribers until all source\nstreams have defined state.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "type"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "description"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "type"
      ],
      "spread": false,
      "description": "description"
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "observers",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#observers",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "observers",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#observers",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "forceState",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#forceState",
    "access": "public",
    "description": "forceState - Funnels can accept new state an send state back up\nthe subscription chain. This should only be used in cases of\nrestoring state.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "type"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "description"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "type"
      ],
      "spread": false,
      "description": "description"
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "src/funnel.js~Funnel",
    "longname": "src/funnel.js~Funnel#destroy",
    "access": "public",
    "description": "destroy - cleans up a Funnel's feeder subscribers.",
    "lineNumber": 111,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Stream from './stream';\nimport Stack from './stack';\nimport Funnel from './funnel';\nimport View from './view';\n\nexport { Stream, Stack, Funnel, View };\n"
  },
  {
    "__docId__": 18,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/stack.js",
    "memberof": null,
    "longname": "src/stack.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "/** Requires Immutable */\nimport Immutable from 'immutable';\n\n/**\n * A Stack isn't a stream, but can be used in conjunction with streams, actions, and\n * transformers to make debugging much easier. Using `pushAction`, 'pushState`,\n * `pushTransformer`, and `pushLog`, you can create a log of state changes and\n * their causes. Calling `dump`, `dumpToLog`, and `dumpWhen` will give you control\n * over when to view to stack.\n */\nclass Stack {\n\n  /**\n   * constructor - A stack takes a size for the stack and a boolean to determine\n   * whether the stack should be enabled on creation.\n   *\n   * @access public\n   * @param  {number} size = 20     The size of the stack.\n   * @param  {boolean} debug = false description\n   * @return {Stack}               description\n   */\n  constructor (size = 20, debug = false) {\n    this.stack = Immutable.List().setSize(size);\n    this.debug = debug;\n  }\n\n  /**\n   * addToStack - Removes the oldest item from the stack,\n   * and adds a new item to the stack.\n   *\n   * @access private\n   * @param  {Immutable.Map} item The new item to add to the stack.\n   */\n  addToStack (item) {\n    if (this.debug) {\n      this.stack = this.stack.shift().push(item);\n    }\n  }\n\n  /**\n   * pushAction - Adds an action to the stack.\n   *\n   * @access public\n   * @param  {string} fnName Name of the action called.\n   * @param  {object} args Arguments to the action called.\n   */\n  pushAction (fnName, args) {\n    this.addToStack(Immutable.Map({type: 'ACTION', name: fnName, args: args}));\n  }\n\n  /**\n   * pushState - Adds a state Map to the stack.\n   *\n   * @access public\n   * @param  {string} name     Name of the stream that's adding state\n   * @param  {Immutable.Map} state      The state object to add to the stack.\n   * @param  {string} streamType The type of stream (View, Funnel, Stream) adding the state.\n   */\n  pushState (name, state, streamType) {\n    this.addToStack(Immutable.Map({ type: 'STATE', name , state, streamType }));\n    if (this.testFn && this.testFn(state)) {\n      this.dumpWhenCb(this.dump());\n    }\n  }\n\n  /**\n   * pushTransformer - Adds a transformer to the stack.\n   *\n   * @access public\n   * @param  {string} fnName Name of the transformer called.\n   * @param  {object} args Arguments to the transformer called.\n   */\n  pushTransformer (fnName, args) {\n    this.addToStack(Immutable.Map({ type: 'TRANSFORMER', name: fnName, args: args}));\n  }\n\n  /**\n   * pushLog - Adds a text log to the stack.\n   *\n   * @param  {string} text The text to be added to the stack.\n   */\n  pushLog (text) {\n    this.addToStack(Immutable.Map({ type: 'LOG', text }));\n  }\n\n  /**\n   * dump - Returns the stack, removing any undefined items.\n   *\n   * @return {Immutable.List}  the stack.\n   */\n  dump () {\n    return this.stack.filter(item => item);\n  }\n\n  /**\n   * dumpWhen - adds a test function to the stack that will run whenever\n   * new state is added to the stack. The test function takes the state\n   * as an argument and returns a boolean. If the test function returns\n   * true, it will then run the callback function, passing the current\n   * stack as an argument.\n   *\n   * @param  {function} testFn takes state as an argument and returns a boolean.\n   * @param  {function} callbackFn takes the current stack as an argument\n   */\n  dumpWhen (testFn, callbackFn) {\n    this.testFn = testFn;\n    this.dumpWhenCb = callbackFn;\n  }\n\n  /**\n   * dumpToLog - When dumpToLog is called, it logs out the current stack to\n   * the console, formatting the different types of items in the stack for\n   * clarity. It takes an optional array for only logging a particular\n   * part of the state objects.\n   *\n   * @param  {array} stateAccessor takes an array of strings for logging only a certain part of the state\n   */\n  dumpToLog (stateAccessor) {\n    const toLog = {\n      ACTION: item => console.log('%cACTION ' + '%c'+item.get('name') + '\\n',\n                                  'font-weight: bold; color: #629456', 'font-style: italic; color: #004',\n                                  item.get('args')),\n      LOG: item => console.log('%cLOG\\n' + item.get('text'), 'background: #eee; color: #555'),\n      TRANSFORMER: item => console.log('%cTRANSFORMER ' + '%c' + item.get('name') + '\\n',\n                                       'font-weight: bold; color: #D08A10', 'font-style: italic; color: #004',\n                                       item.get('args')),\n      STATE: (item, stateAccessor = []) => console.log('%cSTATE ' + (item.streamType ? '(' + item.streamType + ')' : '') + '%c' + item.get('name') + '\\n',\n                                            'font-weight: bold; color: #3B74C4', 'font-style: italic; color: #004',\n                                            item.getIn(['state'].concat(stateAccessor)).toJS())\n    };\n\n    if (this.debug) {\n      this.stack.map(item => {\n        if(item){\n          toLog[item.get('type')](item, stateAccessor);\n        }\n      });\n    }\n  }\n\n  /**\n   * set size - sets the size of the stack.\n   *\n   * @access public\n   * @param  {number} newSize new size for the stack.\n   */\n  set size(newSize) {\n    this.stack.setSize(newSize);\n  }\n\n  /**\n   * get size - getter for returning the current size of the stack.\n   *\n   * @return {number}  returns size of the stack\n   */\n  get size() {\n    return this.stack.size;\n  }\n}\n\nexport default Stack;\n"
  },
  {
    "__docId__": 19,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Stack",
    "memberof": "src/stack.js",
    "longname": "src/stack.js~Stack",
    "access": null,
    "export": true,
    "importPath": "protonic/src/stack.js",
    "importStyle": "Stack",
    "description": "A Stack isn't a stream, but can be used in conjunction with streams, actions, and\ntransformers to make debugging much easier. Using `pushAction`, 'pushState`,\n`pushTransformer`, and `pushLog`, you can create a log of state changes and\ntheir causes. Calling `dump`, `dumpToLog`, and `dumpWhen` will give you control\nover when to view to stack.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 20,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#constructor",
    "access": "public",
    "description": "constructor - A stack takes a size for the stack and a boolean to determine\nwhether the stack should be enabled on creation.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "= 20     The size of the stack."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "= false description"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Stack"
      ],
      "spread": false,
      "description": "description"
    },
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "stack",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#stack",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "debug",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#debug",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addToStack",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#addToStack",
    "access": "private",
    "description": "addToStack - Removes the oldest item from the stack,\nand adds a new item to the stack.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Immutable.Map"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The new item to add to the stack."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "stack",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#stack",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pushAction",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#pushAction",
    "access": "public",
    "description": "pushAction - Adds an action to the stack.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fnName",
        "description": "Name of the action called."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments to the action called."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pushState",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#pushState",
    "access": "public",
    "description": "pushState - Adds a state Map to the stack.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the stream that's adding state"
      },
      {
        "nullable": null,
        "types": [
          "Immutable.Map"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "The state object to add to the stack."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "streamType",
        "description": "The type of stream (View, Funnel, Stream) adding the state."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pushTransformer",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#pushTransformer",
    "access": "public",
    "description": "pushTransformer - Adds a transformer to the stack.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fnName",
        "description": "Name of the transformer called."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments to the transformer called."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pushLog",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#pushLog",
    "access": null,
    "description": "pushLog - Adds a text log to the stack.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to be added to the stack."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "dump",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#dump",
    "access": null,
    "description": "dump - Returns the stack, removing any undefined items.",
    "lineNumber": 91,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Immutable.List"
      ],
      "spread": false,
      "description": "the stack."
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "dumpWhen",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#dumpWhen",
    "access": null,
    "description": "dumpWhen - adds a test function to the stack that will run whenever\nnew state is added to the stack. The test function takes the state\nas an argument and returns a boolean. If the test function returns\ntrue, it will then run the callback function, passing the current\nstack as an argument.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "testFn",
        "description": "takes state as an argument and returns a boolean."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callbackFn",
        "description": "takes the current stack as an argument"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "testFn",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#testFn",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dumpWhenCb",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#dumpWhenCb",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "dumpToLog",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#dumpToLog",
    "access": null,
    "description": "dumpToLog - When dumpToLog is called, it logs out the current stack to\nthe console, formatting the different types of items in the stack for\nclarity. It takes an optional array for only logging a particular\npart of the state objects.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "stateAccessor",
        "description": "takes an array of strings for logging only a certain part of the state"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#size",
    "access": "public",
    "description": "set size - sets the size of the stack.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newSize",
        "description": "new size for the stack."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "size",
    "memberof": "src/stack.js~Stack",
    "longname": "src/stack.js~Stack#size",
    "access": null,
    "description": "get size - getter for returning the current size of the stack.",
    "lineNumber": 156,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "returns size of the stack"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/stream.js",
    "memberof": null,
    "longname": "src/stream.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "/** Requires Immutable */\nimport Immutable from 'immutable';\n\n/**\n * A Stream holds the canonical state of a part of an application, and pushes changes to that state\n * to any observers that are subscribed to the Stream.\n *\n */\nclass Stream {\n\n  /**\n   * constructor - When creating a new stream, an initial state is not required, but it is\n   * encouraged. If an initial state is passed in, it should be an Immutable data structure.\n   *\n   * @param  {Immutable} initialState this is the state that the stream will start with.\n   * @return {Stream} Instance of a Stream.\n   */\n  constructor (initialState) {\n    if(initialState && !Immutable.Iterable.isIterable(initialState)) {\n      throw new TypeError('initialState must be immutable');\n    }\n\n    this._state = initialState;\n    this.observers = Immutable.List();\n    this.type = 'SOURCE';\n  }\n\n\n  logStack (name, stack) {\n    this.name = name;\n    this.stack = stack;\n  }\n  /**\n   * subscribe - takes a callback function that is executed any time the stream received _new_\n   * state. The callback should accept `state` as an argument. If the stream currently has state,\n   * it will be passed to the callback immediately upon subscription.\n   *\n   * An observer gets added to an `observers` array. State changes will propagate to any observers\n   * in this array.\n   *\n   * It will return an object (we'll call a _subscriber_) that has an `unsubscribe` method. This\n   * method will remove the observer from the `observers` List and should be called anytime the\n   * observer is done listening to the stream. Failing to do so could cause memory leaks.\n   *\n   * @access public\n   * @param  {function} observer - the callback function to be executed whenever state updates\n   * @return {object}            - a _subscriber_ object with an `unsubscribe` method\n   */\n  subscribe (observer) {\n    this.observers = this.observers.push(observer);\n    if(this._state) { observer(this._state); }\n    return {\n      unsubscribe: () => {\n        const idx = this.observers.indexOf(observer);\n        if (idx >= 0) {\n          this.observers = this.observers.delete(this.observers.indexOf(observer));\n        } else {\n          throw new RangeError('Observer is not subscribed to this stream.');\n        }\n      }\n    };\n  }\n\n  /**\n   * sendState - Gets called whenever the Stream receives _new_ state. `sendState` first updates\n   * the Streams internal `_state` and then each observer in the `observers` List will be called\n   * with the new state as its argument.\n   *\n   * @access private\n   * @param  {Immutable} newState the Stream's new state.\n   */\n  sendState (newState) {\n      this._state = newState;\n      if (this.stack) { this.stack.pushState(this.name, this._state, this.type); }\n      this.observers.forEach(observer => observer(this._state));\n  }\n\n  /**\n   * next - Receives new state (externally, ideally through a transformer) and verifies that the\n   * new state is different from the Stream's current state before passing on to `sendState` (and,\n   * all the observers, by extension).\n   *\n   * @access public\n   * @param  {Immutable} newState\n   */\n  next (newState) {\n    if(!Immutable.is(this._state, newState)){\n      this.sendState(newState);\n    }\n  }\n\n  forceState (state) {\n    this._state = state;\n  }\n\n  /**\n   * get state - a getter for returning the current internal state of the Stream.\n   *\n   * @access public\n   * @return {Immutable} - current state contained by the Stream\n   */\n  get state(){\n    return this._state;\n  }\n\n  /**\n   * set state - a setter that's probably more clever than it needs to be. Instead of setting\n   * the internal state, it calls `next`.\n   *\n   * ```javascript\n   * stream.next(newState)\n   * // is functionally the same as\n   * stream.state = newState\n   * ```\n   *\n   * Like I said, maybe too clever, but I thinks allow for a more delarative style when\n   * writing transformers.\n   *\n   * @access public\n   * @param  {type} newState description\n   * @return {type}          description\n   */\n  set state(newState){\n    this.next(newState);\n  }\n}\n\nexport default Stream;\n"
  },
  {
    "__docId__": 37,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Stream",
    "memberof": "src/stream.js",
    "longname": "src/stream.js~Stream",
    "access": null,
    "export": true,
    "importPath": "protonic/src/stream.js",
    "importStyle": "Stream",
    "description": "A Stream holds the canonical state of a part of an application, and pushes changes to that state\nto any observers that are subscribed to the Stream.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 38,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#constructor",
    "access": null,
    "description": "constructor - When creating a new stream, an initial state is not required, but it is\nencouraged. If an initial state is passed in, it should be an Immutable data structure.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Immutable"
        ],
        "spread": false,
        "optional": false,
        "name": "initialState",
        "description": "this is the state that the stream will start with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Stream"
      ],
      "spread": false,
      "description": "Instance of a Stream."
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_state",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#_state",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "observers",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#observers",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#type",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "logStack",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#logStack",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "stack",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#name",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "stack",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#stack",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subscribe",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#subscribe",
    "access": "public",
    "description": "subscribe - takes a callback function that is executed any time the stream received _new_\nstate. The callback should accept `state` as an argument. If the stream currently has state,\nit will be passed to the callback immediately upon subscription.\n\nAn observer gets added to an `observers` array. State changes will propagate to any observers\nin this array.\n\nIt will return an object (we'll call a _subscriber_) that has an `unsubscribe` method. This\nmethod will remove the observer from the `observers` List and should be called anytime the\nobserver is done listening to the stream. Failing to do so could cause memory leaks.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "the callback function to be executed whenever state updates"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "a _subscriber_ object with an `unsubscribe` method"
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "observers",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#observers",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "observers",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#observers",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "sendState",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#sendState",
    "access": "private",
    "description": "sendState - Gets called whenever the Stream receives _new_ state. `sendState` first updates\nthe Streams internal `_state` and then each observer in the `observers` List will be called\nwith the new state as its argument.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Immutable"
        ],
        "spread": false,
        "optional": false,
        "name": "newState",
        "description": "the Stream's new state."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_state",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#_state",
    "access": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#next",
    "access": "public",
    "description": "next - Receives new state (externally, ideally through a transformer) and verifies that the\nnew state is different from the Stream's current state before passing on to `sendState` (and,\nall the observers, by extension).",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Immutable"
        ],
        "spread": false,
        "optional": false,
        "name": "newState",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "forceState",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#forceState",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_state",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#_state",
    "access": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#state",
    "access": "public",
    "description": "get state - a getter for returning the current internal state of the Stream.",
    "lineNumber": 102,
    "return": {
      "nullable": null,
      "types": [
        "Immutable"
      ],
      "spread": false,
      "description": "current state contained by the Stream"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "src/stream.js~Stream",
    "longname": "src/stream.js~Stream#state",
    "access": "public",
    "description": "set state - a setter that's probably more clever than it needs to be. Instead of setting\nthe internal state, it calls `next`.\n\n```javascript\nstream.next(newState)\n// is functionally the same as\nstream.state = newState\n```\n\nLike I said, maybe too clever, but I thinks allow for a more delarative style when\nwriting transformers.",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "type"
        ],
        "spread": false,
        "optional": false,
        "name": "newState",
        "description": "description"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "type"
      ],
      "spread": false,
      "description": "description"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/view.js",
    "memberof": null,
    "longname": "src/view.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Stream from './stream';\n\n/**\n * A View is a kind of Stream that is useful for transforming the shape of state for\n * use in components or interfaces. A View caches the result of the function, and will\n * only emit state to subscribers if the new return value is distinct from the\n * previous value.\n *\n * @extends Stream\n */\nclass View extends Stream {\n\n  /**\n   * constructor - Takes a source stream, and transforms it through a function.\n   * The view function takes state from the source stream and transforms it into\n   * returns a new shape of the state for use in a component or interface.\n   *\n   * @access public\n   * @param  {Stream} source A stream to receive state from (can be a source stream or a funnel)\n   * @param  {function} viewFn A function that takes state and returns a new shape for the state.\n   * @returns {View}\n   */\n  constructor (source, viewFn) {\n    if (!source || !(source instanceof Stream)) {\n      throw new Error('Views require a source stream.');\n    }\n\n    if (!viewFn || (typeof viewFn !== 'function')) {\n      throw new Error('Views require a view function.');\n    }\n\n    super();\n\n    this.source = source;\n    this.sourceSubscriber = source.subscribe( state => this.next(viewFn(state)) );\n    this.type = 'VIEW';\n  }\n\n  /**\n   * forceState - Overrides the base Stream class's forceState.\n   * A View cannot receive new state through forceState.\n   * @access private\n   * @return {type}  description\n   */\n  forceState () {\n    throw new Error('Cannot force state on a View.')\n  }\n\n  /**\n   * destroy - Clean up subscriptions.\n   *\n   * @access public\n   * @return {type}  description\n   */\n  destroy () {\n    this.sourceSubscriber.unsubscribe();\n  }\n}\n\nexport default View;\n"
  },
  {
    "__docId__": 56,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "View",
    "memberof": "src/view.js",
    "longname": "src/view.js~View",
    "access": null,
    "export": true,
    "importPath": "protonic/src/view.js",
    "importStyle": "View",
    "description": "A View is a kind of Stream that is useful for transforming the shape of state for\nuse in components or interfaces. A View caches the result of the function, and will\nonly emit state to subscribers if the new return value is distinct from the\nprevious value.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 57,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/view.js~View",
    "longname": "src/view.js~View#constructor",
    "access": "public",
    "description": "constructor - Takes a source stream, and transforms it through a function.\nThe view function takes state from the source stream and transforms it into\nreturns a new shape of the state for use in a component or interface.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{View}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Stream"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "A stream to receive state from (can be a source stream or a funnel)"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "viewFn",
        "description": "A function that takes state and returns a new shape for the state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "View"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "source",
    "memberof": "src/view.js~View",
    "longname": "src/view.js~View#source",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sourceSubscriber",
    "memberof": "src/view.js~View",
    "longname": "src/view.js~View#sourceSubscriber",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "src/view.js~View",
    "longname": "src/view.js~View#type",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "forceState",
    "memberof": "src/view.js~View",
    "longname": "src/view.js~View#forceState",
    "access": "private",
    "description": "forceState - Overrides the base Stream class's forceState.\nA View cannot receive new state through forceState.",
    "lineNumber": 45,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "type"
      ],
      "spread": false,
      "description": "description"
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "src/view.js~View",
    "longname": "src/view.js~View#destroy",
    "access": "public",
    "description": "destroy - Clean up subscriptions.",
    "lineNumber": 55,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "type"
      ],
      "spread": false,
      "description": "description"
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 65,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 66,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]